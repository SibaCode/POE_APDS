{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Notification from './../../Notification';\nimport Navbar from '../../components/Navbar';\nimport './../customer/css/DashboardPage.css';\nconst apiBaseUrl = 'https://localhost:7150/api/TransactionDetails'; // replace with your actual backend URL\n\nconst TransDetailPage = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [form, setForm] = useState({\n    id: 0,\n    amount: '',\n    currency: '',\n    provider: '',\n    status: '',\n    date: ''\n  });\n  const [editingId, setEditingId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  const fetchTransactions = async () => {\n    try {\n      const res = await axios.get(apiBaseUrl);\n      setTransactions(res.data);\n    } catch (err) {\n      console.error('Error fetching transactions:', err);\n    }\n  };\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      if (editingId) {\n        await axios.put(`${apiBaseUrl}/${editingId}`, form);\n      } else {\n        await axios.post(apiBaseUrl, form);\n      }\n      setForm({\n        id: 0,\n        amount: '',\n        currency: '',\n        provider: '',\n        status: '',\n        date: ''\n      });\n      setEditingId(null);\n      setIsModalOpen(false); // Close the modal after submission\n      fetchTransactions();\n    } catch (err) {\n      console.error('Error saving transaction:', err);\n    }\n  };\n  const handleEdit = tx => {\n    setForm(tx);\n    setEditingId(tx.id);\n    setIsModalOpen(true); // Open modal when editing\n  };\n  const handleDelete = async id => {\n    try {\n      await axios.delete(`${apiBaseUrl}/${id}`);\n      fetchTransactions();\n    } catch (err) {\n      console.error('Error deleting transaction:', err);\n    }\n  };\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n    setForm({\n      id: 0,\n      amount: '',\n      currency: '',\n      provider: '',\n      status: '',\n      date: ''\n    });\n    setEditingId(null);\n  };\n\n  //   return (\n  //     <div style={{ maxWidth: 800, margin: '0 auto', padding: 20 }}>\n  //       {/* Add Navbar component */}\n  //       <Navbar />\n  //       <div className=\"dashboard-container\">\n\n  //       <h2>Transaction Details</h2>\n\n  //       {/* Button to trigger the modal */}\n  //       <button onClick={toggleModal}>Add New Transaction</button>\n\n  //       {/* Modal to add/edit transaction */}\n  //       {isModalOpen && (\n  //         <div className=\"modal\">\n  //           <div className=\"modal-content\">\n  //             <h3>{editingId ? 'Edit Transaction' : 'New Transaction'}</h3>\n\n  //             <form onSubmit={handleSubmit} style={{ marginBottom: 20 }}>\n  //               <div>\n  //                 <label>Amount:</label>\n  //                 <input type=\"number\" name=\"amount\" value={form.amount} onChange={handleChange} required />\n  //               </div>\n  //               <div>\n  //                 <label>Currency:</label>\n  //                 <input type=\"text\" name=\"currency\" value={form.currency} onChange={handleChange} required />\n  //               </div>\n  //               <div>\n  //                 <label>Provider:</label>\n  //                 <input type=\"text\" name=\"provider\" value={form.provider} onChange={handleChange} required />\n  //               </div>\n  //               <div>\n  //                 <label>Status:</label>\n  //                 <input type=\"text\" name=\"status\" value={form.status} onChange={handleChange} required />\n  //               </div>\n  //               <div>\n  //                 <label>Date:</label>\n  //                 <input type=\"datetime-local\" name=\"date\" value={form.date} onChange={handleChange} required />\n  //               </div>\n  //               <button type=\"submit\">{editingId ? 'Update' : 'Create'}</button>\n  //               <button onClick={toggleModal} type=\"button\">Close</button>\n  //             </form>\n  //           </div>\n  //         </div>\n  //       )}\n\n  //       <table border=\"1\" width=\"100%\">\n  //         <thead>\n  //           <tr>\n  //             <th>ID</th>\n  //             <th>Amount</th>\n  //             <th>Currency</th>\n  //             <th>Provider</th>\n  //             <th>Status</th>\n  //             <th>Date</th>\n  //             <th>Actions</th>\n  //           </tr>\n  //         </thead>\n  //         <tbody>\n  //           {transactions.map((tx) => (\n  //             <tr key={tx.id}>\n  //               <td>{tx.id}</td>\n  //               <td>{tx.amount}</td>\n  //               <td>{tx.currency}</td>\n  //               <td>{tx.provider}</td>\n  //               <td>{tx.status}</td>\n  //               <td>{new Date(tx.date).toLocaleString()}</td>\n  //               <td>\n  //                 <button onClick={() => handleEdit(tx)}>Edit</button>\n  //                 <button onClick={() => handleDelete(tx.id)}>Delete</button>\n  //               </td>\n  //             </tr>\n  //           ))}\n  //         </tbody>\n  //       </table>\n  //     </div>\n  //      </div>\n  //   );\n};\n_s(TransDetailPage, \"BTHzWpJq0pLpcBLcOsoW06SH7Sc=\");\n_c = TransDetailPage;\nexport default TransDetailPage;\nvar _c;\n$RefreshReg$(_c, \"TransDetailPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Notification","Navbar","apiBaseUrl","TransDetailPage","_s","transactions","setTransactions","form","setForm","id","amount","currency","provider","status","date","editingId","setEditingId","isModalOpen","setIsModalOpen","fetchTransactions","res","get","data","err","console","error","handleChange","e","target","name","value","handleSubmit","preventDefault","put","post","handleEdit","tx","handleDelete","delete","toggleModal","_c","$RefreshReg$"],"sources":["/home/sibahle/Desktop/Rosebank 2025/secure-international-payments/src/components/customer/TransDetailPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Notification from './../../Notification';\nimport Navbar from '../../components/Navbar';\nimport './../customer/css/DashboardPage.css';\n\nconst apiBaseUrl = 'https://localhost:7150/api/TransactionDetails'; // replace with your actual backend URL\n\nconst TransDetailPage = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [form, setForm] = useState({\n    id: 0,\n    amount: '',\n    currency: '',\n    provider: '',\n    status: '',\n    date: ''\n  });\n  const [editingId, setEditingId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n\n  const fetchTransactions = async () => {\n    try {\n      const res = await axios.get(apiBaseUrl);\n      setTransactions(res.data);\n    } catch (err) {\n      console.error('Error fetching transactions:', err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (editingId) {\n        await axios.put(`${apiBaseUrl}/${editingId}`, form);\n      } else {\n        await axios.post(apiBaseUrl, form);\n      }\n      setForm({ id: 0, amount: '', currency: '', provider: '', status: '', date: '' });\n      setEditingId(null);\n      setIsModalOpen(false); // Close the modal after submission\n      fetchTransactions();\n    } catch (err) {\n      console.error('Error saving transaction:', err);\n    }\n  };\n\n  const handleEdit = (tx) => {\n    setForm(tx);\n    setEditingId(tx.id);\n    setIsModalOpen(true); // Open modal when editing\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`${apiBaseUrl}/${id}`);\n      fetchTransactions();\n    } catch (err) {\n      console.error('Error deleting transaction:', err);\n    }\n  };\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n    setForm({ id: 0, amount: '', currency: '', provider: '', status: '', date: '' });\n    setEditingId(null);\n  };\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: '0 auto', padding: 20 }}>\n//       {/* Add Navbar component */}\n//       <Navbar />\n//       <div className=\"dashboard-container\">\n\n//       <h2>Transaction Details</h2>\n\n//       {/* Button to trigger the modal */}\n//       <button onClick={toggleModal}>Add New Transaction</button>\n\n//       {/* Modal to add/edit transaction */}\n//       {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h3>{editingId ? 'Edit Transaction' : 'New Transaction'}</h3>\n\n//             <form onSubmit={handleSubmit} style={{ marginBottom: 20 }}>\n//               <div>\n//                 <label>Amount:</label>\n//                 <input type=\"number\" name=\"amount\" value={form.amount} onChange={handleChange} required />\n//               </div>\n//               <div>\n//                 <label>Currency:</label>\n//                 <input type=\"text\" name=\"currency\" value={form.currency} onChange={handleChange} required />\n//               </div>\n//               <div>\n//                 <label>Provider:</label>\n//                 <input type=\"text\" name=\"provider\" value={form.provider} onChange={handleChange} required />\n//               </div>\n//               <div>\n//                 <label>Status:</label>\n//                 <input type=\"text\" name=\"status\" value={form.status} onChange={handleChange} required />\n//               </div>\n//               <div>\n//                 <label>Date:</label>\n//                 <input type=\"datetime-local\" name=\"date\" value={form.date} onChange={handleChange} required />\n//               </div>\n//               <button type=\"submit\">{editingId ? 'Update' : 'Create'}</button>\n//               <button onClick={toggleModal} type=\"button\">Close</button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n\n//       <table border=\"1\" width=\"100%\">\n//         <thead>\n//           <tr>\n//             <th>ID</th>\n//             <th>Amount</th>\n//             <th>Currency</th>\n//             <th>Provider</th>\n//             <th>Status</th>\n//             <th>Date</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {transactions.map((tx) => (\n//             <tr key={tx.id}>\n//               <td>{tx.id}</td>\n//               <td>{tx.amount}</td>\n//               <td>{tx.currency}</td>\n//               <td>{tx.provider}</td>\n//               <td>{tx.status}</td>\n//               <td>{new Date(tx.date).toLocaleString()}</td>\n//               <td>\n//                 <button onClick={() => handleEdit(tx)}>Edit</button>\n//                 <button onClick={() => handleDelete(tx.id)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//      </div>\n//   );\n};\n\nexport default TransDetailPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}